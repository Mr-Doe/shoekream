<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shoekream.www.repository.searchDAO.productDAO.ProductDAO">

	<sql id="whereSize">
		<if test="sizeToArray != null">
			and ss.size_id in
			<foreach collection="sizeToArray" item="sizeID" separator=","
				open="(" close=")">
				#{sizeID}
			</foreach>
		</if>
	</sql>
	
	<sql id="whereBrandCategory">
		<if test="brandToArray != null">
			and sb.brand_id in
			<foreach collection="brandToArray" item="brandID"
				separator="," open="(" close=")">
				#{brandID}
			</foreach>
		</if>
		<if test="categoryToArray != null">
			and p.category in
			<foreach collection="categoryToArray" item="categoryID"
				separator="," open="(" close=")">
				#{categoryID}
			</foreach>
		</if>
	</sql>
	
	<sql id="keyword">
		like CONCAT('%',#{keyword},'%')
	</sql>
	
	<sql id="search">
		<if test="keyword != null">
			AND (REPLACE(e_name, ' ', '') <include refid="keyword"/>
				or REPLACE(k_name, ' ', '') <include refid="keyword"/>
				or REPLACE(model, ' ', '') <include refid="keyword"/>
				or REPLACE(sb.brand_name, ' ', '') <include refid="keyword"/>)  
		</if>
	</sql>
	<insert id="insert" parameterType="productVO">
		INSERT INTO product (
			pno
			, model
			, e_name
			, k_name
			, brand
			, category
			, retail_price
		) VALUES (
			#{pno}
			, #{model}
			, #{eName}
			, #{kName}
			, #{brand}
			, #{category}
			, #{retailPrice}
		)
	</insert>
	<insert id="insertImage" parameterType="productVO">
		INSERT INTO model_image (
			model_number
			, model_image_url
		) VALUES (
			#{model}
			, #{fileName}
		)
	</insert>
	
	<select id="selectList" parameterType="pageVO" resultType="productVO">
		SELECT
    		p.pno as pno
    		, e_name as eName
    		, k_name as kName
    		, sb.brand_name as brandName
    		, sc.category_name as categoryName
    		, model_image_url as imageUrl
		FROM
    		product p 
    	JOIN
    		shoe_brand sb
        ON
        	p.brand = sb.brand_id
    	JOIN
    		shoe_category sc
        ON
        	p.category = sc.category_id
    	LEFT JOIN
    		model_image mi
        ON
        	p.model = mi.model_number
		WHERE
			activate = 'y'
		<include refid="whereBrandCategory" />
		<include refid="search"/>
		GROUP BY
			pno
		ORDER BY
			pno desc
		LIMIT
			#{pageStart}, #{qty}
	</select>
	<select id="selectMinPrice" parameterType="pageVO" resultType="productVO">
		SELECT
			pno
			, MIN(price) as minPrice
		FROM
			items i
		JOIN
			shoe_size ss
		ON
			i.shoe_size = ss.size_id
		WHERE
			1=1
		AND
			buyer_email is null
		<include refid="whereSize" />
		GROUP BY
			pno
	</select>
	<select id="totalCount" parameterType="pageVO" resultType="int">
		SELECT
    		COUNT(p.pno)
		FROM
    		product p 
    	JOIN
    		shoe_brand sb
        ON 
        	p.brand = sb.brand_id
    	JOIN 
    		shoe_category sc
        ON 
        	p.category = sc.category_id
		WHERE
			activate = 'y'
		<include refid="whereBrandCategory"/>
		<include refid="search"/>
	</select>
	<select id="checkModelDuple" parameterType="String" resultType="int">
		SELECT
			COUNT(pno)
		FROM
			product
		WHERE
			model = #{model}
	</select>
	<select id="selectLastPno" resultType="int">
		SELECT
			max(pno)
		FROM
			product
	</select>
	<select id="selectModelNumber" parameterType="int" resultType="String">
		SELECT
			model
		FROM
			product
		WHERE
			pno = #{pno}
	</select>
	<select id="selectImageIdAndUrl" parameterType="String" resultType="productVO">
		SELECT
			image_id
			, model_image_url as imageUrl
		FROM
			model_image
		WHERE
			model_number = #{modelNumber}
	</select>
	
	<delete id="deleteProduct" parameterType="int">
		DELETE FROM product
		WHERE pno = #{pno}
	</delete>
</mapper>